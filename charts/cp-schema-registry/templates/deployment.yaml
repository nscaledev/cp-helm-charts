{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-schema-registry.fullname" . }}
  labels:
    app: {{ template "cp-schema-registry.name" . }}
    chart: {{ template "cp-schema-registry.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-schema-registry.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-schema-registry.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      securityContext:
      {{- if .Values.securityContext }}
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end}}
      initContainers:
      - name: convert-pem-to-jks
        image: openjdk:11
        command:
          - sh
          - -c
          - |
            # Extract passwords
            CA_PASSWORD=$(cat /etc/tls/kafka-cluster-ca-cert/ca.password)
            USER_PASSWORD=$(cat /etc/tls/kafka-user/user.password)

            # Convert CA cert to JKS truststore
            keytool -import -trustcacerts -file /etc/tls/kafka-cluster-ca-cert/ca.crt -alias kafka-cluster-ca -keystore /etc/tls/kafka-jks/truststore.jks -storepass $CA_PASSWORD -noprompt

            # Convert user cert and key to PKCS12
            openssl pkcs12 -export -in /etc/tls/kafka-user/user.crt -inkey /etc/tls/kafka-user/user.key -out /etc/tls/kafka-jks/user.p12 -name kafka-user -CAfile /etc/tls/kafka-user/ca.crt -caname root -password pass:$USER_PASSWORD

            # Convert PKCS12 to JKS keystore
            keytool -importkeystore -deststorepass $USER_PASSWORD -destkeypass $USER_PASSWORD -destkeystore /etc/tls/kafka-jks/keystore.jks -srckeystore /etc/tls/kafka-jks/user.p12 -srcstoretype PKCS12 -srcstorepass $USER_PASSWORD -alias kafka-user

        volumeMounts:
          - name: kafka-cluster-ca-cert-secret
            mountPath: "/etc/tls/kafka-cluster-ca-cert"
            readOnly: true
          - name: kafka-user-secret
            mountPath: "/etc/tls/kafka-user"
            readOnly: true
          - name: kafka-jks
            mountPath: "/etc/tls/kafka-jks"
      containers:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.prometheus.jmx.port | quote }}
          - /etc/jmx-schema-registry/jmx-schema-registry-prometheus.yml
          ports:
          - containerPort: {{ .Values.prometheus.jmx.port }}
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-schema-registry
        {{- end }}
        - name: {{ template "cp-schema-registry.name" . }}-server
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          ports:
            - name: schema-registry
              containerPort: {{ .Values.servicePort }}
              protocol: TCP
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: kafka-cluster-ca-cert-secret
            mountPath: /etc/tls/kafka-cluster-ca-cert
            readOnly: true
          - name: kafka-user-secret
            mountPath: /etc/tls/kafka-user
            readOnly: true
          - name: kafka-jks
            mountPath: "/etc/tls/kafka-jks"
          env:
          - name: SCHEMA_REGISTRY_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SCHEMA_REGISTRY_LISTENERS
            value: https://0.0.0.0:{{ .Values.servicePort }}
          - name: SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS
            value: {{ template "cp-schema-registry.kafka.bootstrapServers" . }}
          - name: SCHEMA_REGISTRY_KAFKASTORE_GROUP_ID
            value: {{ template "cp-schema-registry.groupId" . }}
          - name: SCHEMA_REGISTRY_MASTER_ELIGIBILITY
            value: "true"
          - name: SCHEMA_REGISTRY_HEAP_OPTS
            value: "{{ .Values.heapOptions }}"
          {{- range $key, $value := .Values.configurationOverrides }}
            {{- if (kindIs "map" $value) }}
              {{- if hasKey $value "secret" }}
          - name: {{ printf "SCHEMA_REGISTRY_%s" $key | replace "." "_" | upper }}
            valueFrom:
              secretKeyRef:
                name: {{ $value.secret.name | quote }}
                key: {{ $value.secret.key | quote }}
              {{- end }}
            {{- else }}
          - name: {{ printf "SCHEMA_REGISTRY_%s" $key | replace "." "_" | upper }}
            value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- range $key, $value := .Values.customEnv }}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.schemaRegistryOpts }}
          - name: SCHEMA_REGISTRY_OPTS
            value: "{{ .Values.schemaRegistryOpts }}"
          {{- end }}
          {{- if .Values.jmx.port }}
          - name: JMX_PORT
            value: "{{ .Values.jmx.port }}"
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-schema-registry.fullname" . }}-jmx-configmap
      {{- end }}
      # TODO: Optional if .Values.configurationOverrides.security.protocol is set to SSL, generic
      - name: kafka-cluster-ca-cert-secret
        secret:
          secretName: kafka-billing-dev-glo1-cluster-ca-cert
      - name: kafka-user-secret
        secret:
          secretName: schema-registry
      - name: kafka-jks
        emptyDir: {}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
